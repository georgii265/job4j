package ru.job4j.tracker;

import java.util.Random;
import java.util.Arrays;

/**
 * В классе ru.job4j.tracker.Tracker должны быть методы:
 * добавление заявок - public Item add(Item item);
 * получение списка всех заявок - public Item[] findAll();
 * получение списка по имени - public Item[] findByName(String key);
 * получение заявки по id - public Item findById(String id);
 */

public class Tracker { //шаблон для обьекта

    /**
     * Массив для хранения заявок.
     * Одновременно объявляем переменную и определяем массив.
     * Если массив создаётся таким образом, то всем элементам массива автоматически присваиваются значения по умолчанию.
     * Например, для числовых значений начальное значение будет 0.
     */
    //В нашем примере мы создали массив из 100 элементов типа Item и присвоили его ранее объявленной переменной items.
    //final в этом случае означает что нельзя изменить ссылку на данный объект.
    //При создании массива с помощью ключевого слова new, все элементы массива автоматически инициализированы нулевыми значениями.
    private final Item[] items = new Item[100];//переменная экземпляра
    //переменная - это просто посуда.Контейнер.Она предназначена для хранения.
    //обьявляя переменную мы должны указать для нее конкретный тип.
    //ссылочные переменные содержат биты,которые описывают способ получения обьекта.

    /**
     * Указатель ячейки для новой заявки.
     */
    //Для того, чтобы присвоить элементам массива свои начальные значения,
    //необходимо провести его инициализацию. Инициализацию можно проводить как поэлементно так и с помощью цикла,
    //например:for(int index = 0;index < position; index++){ items[index] = position }
    private int position = 0;//переменная экземпляра

    /**
     * Метод добавления заявки в хранилище
     *
     * @param item новая заявка
     * Метод public Item add(Item item) добавляет заявку, переданную в аргументах в массив заявок this.items;
     * В методе add нужно проставить уникальный ключ в объект Item item. Это нужно сделать через метод setId.
     * Уникальный ключ нужно генерировать на основании времени и произвольного числа - item.setId(this.generateId());
     * В качестве ключа нельзя использовать индекс от массива.
     */
    public Item add(Item item) {
        item.setId(this.generateId());
        items[this.position++] = item;//оператор доступа "точка"(.)в сочетании со сылочной переменной,
        //чтобы сказать:"Используй элемент перед точкой,чтобы дать мне элемент,находящийся после точки".
        //например: this.position++ = item;
        //Переменная this ссылается на текущий экземпляр класса, в котором она используется.
        return item;
    }

    /**
     * Метод генерирует уникальный ключ для заявки.
     * Так как у заявки нет уникальности полей, имени и описание. Для идентификации нам нужен уникальный ключ.
     *
     * @return Уникальный ключ.
     */
    private String generateId() {
        Random rm = new Random();
        return String.valueOf(rm.nextLong() + System.currentTimeMillis());
    }

    /**
     * Метод на получение списка всех заявок - public Item[] findAll();
     * Метод public Item[] findAll() возвращает копию массива this.items без null элементов (без пустых клеток).
     * Метод findAll можно записать в одно строку return Arrays.copyOf(items, position);
     * Сделать так мы можем, потому что у нас элементы хранятся только до position, с position у нас хранятся только null.
     * Соответственно, нам достаточно скопировать заполненный кусок массива
     */
    public Item[] findAll() {
        return Arrays.copyOf(items, position);//т.е. что у нас здесь получается,
        // что this(ссылается на текущий экземпляр класса Item)оператор "точка"(.) говорит нам использовать элемент
        //перед точкой,чтобы получить items - в этом случае без null (без пустых клеток).
        //тем самым мы копируем элемент индекса items в длинну массива position.
    }

    /**
     * Метод на получение списка по имени - public Item[] findByName(String key)
     * Метод public Item[] findByName(String key) проверяет в цикле все элементы массива this.items,
     * сравнивая name (используя метод getName класса Item) с аргументом метода String key.
     * Элементы, у которых совпадает name, копирует в результирующий массив и возвращает его.
     * Алгоритм этого метода аналогичен методу findAll.
     * <p>
     * Метод findByName можно реализовать так. Создать массив размера position.
     * Записать в него элементы которые удолетворяют условию items[i].getName().equals(key).
     * Записать можно просто result[count++] = items[i];
     * count мы считаем чтобы обрезать массив, т.е. оставить его без null элементов по аналогии с пунктом 1,
     * а также чтобы записывать значения в массив
     */
    public Item[] findByName(String key) {
        //Создаем массив в кол-ве элементов
        //т.к. все элементы могут быть с одиноковыми именем.
        Item[] result = new Item[position];//В этом примере мы создали массив из position элементов типа Item
        // и присвоили переменной result.
        int count = 0;//Перед циклом мы объявили счетчик count.
        //Он одновременно является текущим индексом для массива result.
        //так же мы будем обрезать этот массив по этому размеру.
        for (int index = 0; index < position; index++) {
            if (items[index].getName().equals(key)) { // вот здесь пока я ни разобрался,но все в процессе....
                result[count++] = items[index];//по поводу обьявленного счетчика мне пока ни ясен принцип его работы?
            }
        }
        //Обрезаем массив, оставляя его без null элементов.
        return Arrays.copyOf(result, count);
    }

    /**
     * Метод на получение заявки по id - public Item findById(String id)
     * Метод public Item findById(String id) проверяет в цикле все элементы массива this.items,
     * сравнивая id с аргументом String id и возвращает найденный Item. Если Item не найден - возвращает null.
     * Помните, что для сравнения строк мы должны использовать метод equals() например:
     * item.getId().equals(tmp.getId()). Сравнивать через == нельзя.
     */
    public Item findById(String id) {
        int index = indexOf(id);
        if(index != -1){
            return items[index];
        }
        return null;
    }

    /**
     * Весь метод replace будет состоять из 3 строчек кода.
     * 1. Найти индекс ячейки по id.
     * 2. Проставить id с item. При замене нужно сохранять старый id.
     * 3. Записать в ячейку с найденным индекс объект item. Это входящий параметр.
     * @return
     */
    public void replace(String id, Item item) {
        //в цикле for обьявляем переменную int index в инициализирующей части цикла for;
        //затем у нас вычисляется логическое выражение,т.е. сравнение с переменной типа int index,
        int index = indexOf(id);
       // for (int index = 0; index < position; index++) {
            if (index != -1 ) { //делаем проверку,так как мы  ищем по id.
                item.setId(id); // устанавливаем id чтоб можно было найти потом.
                items[index] = item;// получаем item из ячейки.
            }
            return;
        }

    /**
     * Метод удаления заявки.
     *
     */
    public void delete (String id){
        int index = indexOf(id) +1;//Массив куда мы копируем, тот же items.
         if(index != position);//Проверяет, равны или нет значения двух операндов,
        // если значения не равны, то условие становится истинным.
          System.arraycopy(items,index +1,items,index, items.length - index -1);//метод, который позволяет скопировать блоки массива целиком.
        // Остаток массива копируем, т.е. правую часть относительно индекса.
         // Мы имеем индекс и position. Скопировать нам нужно все элементы от индекс до position.
           items[position] = null;//Так же в конце нам нужно обнулить последнюю ячейку,
           // так как она будет заполнена последним элементов, а мы элементы сдвинули.
           position--;//И самое последнее, нам нужно уменьшить указатель position.
    }



    /**
     * Метод возвращает index по id.
     * Метод indexOf объявлен как private, потому что он используется только внутри системы.
     */
    private int indexOf(String id) {
        int rsl = -1;
        for (int index = 0; index < position; index++) {
            if (items[index].getId().equals(id)) {
                rsl = index;
                break;
            }
        }
        return rsl;
    }
}



