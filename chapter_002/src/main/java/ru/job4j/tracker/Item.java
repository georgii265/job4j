package ru.job4j.tracker;


/**
 * Давайте создадим класс модель Item.
 * Item описывают бизнес модель заявки.
 * В нем будут два поля: id (уникальный ключ), name - имя.
 */

public class Item {

    private String id;
    private String name;

    /**
     * Это нужно делать в классе Item. Средставми Idea можно сделать автоматически.
     * Сочетание клавиш alt+insert - и там выбираете toString(). Выбираете нужные поля и нажимаете ОК.
     * Дальше можно просто писать System.out.println(item),
     * и оно корректно будет выводить (автоматически будет вызывать toString).
     * @return
     */
    @Override
    public String toString() {
        return "Item{" +
                "id='" + id + '\'' +
                ", name='" + name + '\'' +
                '}';
    }

    public Item(String name) {
        this.name = name;
    }

    /**
     * Метод геттер не имеет параметров (т.е. в скобках ничего не пишется)
     * и возвращает значение одной переменной (одного поля).
     * метод getName (имя метода-геттера состоит из слова get + название переменной)
     * - это метод, который возвращает переменную типа String (т.е. имя ), и при этом не требует никаких данных.
     */
    public String getId() {
        return id;
    }

    /**
     * Метод сеттер всегда имеет модификатор void и только один параметр,
     * для изменения значения одного поля.
     * Метод setId (имя метода-сеттера тоже состоит из слова set + название переменной)
     * ничего не возвращает (void) но при этом требует String - новое значение для переменной id.
     */
    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    /**
     * Посмотрите на слово this.
     * Дело в том, что в данном методе есть две переменные с одинаковым названием - переменная String name,
     * которую мы объявили ранее для всего класса, и переменная внутри метода:
     * Это означает, что программа не знает - когда Вы пишете, например,
     * "name =", который из них Вы имеете ввиду? Поэтому, для обозначения переменной,
     * объявленной для всего класса, используется слово "this":
     */
    public void setName(String name) {
        this.name = name;
    }
}